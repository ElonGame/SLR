//setRenderer("method": "PT", ("samples": 16384,));
setRenderer("method": "BPT", ("samples": 16384,));
//setRenderer("method": "debug", (("geometric normal", "shading normal", "shading tangent"),));
setRenderSettings("width": 1024, "height": 1024, "brightness": 4.0);

CBNode = load3DModel("models/Cornell_box_RB.assbin");
    lightNode = createNode();
    setTransform(lightNode, translate(0.0, 0.999, 0.0));
        diffuseCol = Spectrum(0.9, 0.9, 0.9);
        diffuseTex = SpectrumTexture(diffuseCol);
        scatterMat = createSurfaceMaterial("matte", (diffuseTex,));
        difLightCol = Spectrum("ID": "D65");
        difLightTex = SpectrumTexture(difLightCol);
        emitterMat = createEmitterSurfaceProperty("diffuse", (difLightTex,));
        surfMat = createSurfaceMaterial("emitter", (scatterMat, emitterMat));

        lightMesh = createMesh(
            (
            ((-0.25, 0, -0.25), (0, -1, 0), (1, 0, 0), (0, 0)), 
            (( 0.25, 0, -0.25), (0, -1, 0), (1, 0, 0), (1, 0)),
            (( 0.25, 0,  0.25), (0, -1, 0), (1, 0, 0), (1, 1)),
            ((-0.25, 0,  0.25), (0, -1, 0), (1, 0, 0), (0, 1))
            ),
            (
            ((0, 1, 2), surfMat), 
            ((0, 2, 3), surfMat)
            )
            );
        addChild(lightNode, lightMesh);
    addChild(CBNode, lightNode);
addChild(root, CBNode);

// Color Checker Materials
mats = (,);
for (i = 0; i < 24; ++i) {
    sp = Spectrum("ID": "ColorChecker", i);
    difTex = SpectrumTexture(sp);
    scatterMat = createSurfaceMaterial("matte", (difTex,));
    addItem(mats, scatterMat);
}

// Create Color Checker
vertices = (,);
indices = (,);
for (i = 0; i < 24; ++i) {
    transform = translate(0, 0, -0.999) * scale(0.9 / 3.0) * 
                translate(-3.0 + (i % 6), 1.0 - (i / 6), 0.0);

    addItem(vertices, transform * createVertex((0.0, 0.0, 0.0), (0, 0, 1), (1, 0, 0), (0, 0)));
    addItem(vertices, transform * createVertex((1.0, 0.0, 0.0), (0, 0, 1), (1, 0, 0), (1, 0)));
    addItem(vertices, transform * createVertex((1.0, 1.0, 0.0), (0, 0, 1), (1, 0, 0), (1, 1)));
    addItem(vertices, transform * createVertex((0.0, 1.0, 0.0), (0, 0, 1), (1, 0, 0), (0, 1)));
    
    idxBase = 4 * i;
    addItem(indices, ((idxBase + 0, idxBase + 1, idxBase + 2), mats[i]));
    addItem(indices, ((idxBase + 0, idxBase + 2, idxBase + 3), mats[i]));
}
colorCheckerMesh = createMesh(vertices, indices);
addChild(CBNode, colorCheckerMesh);

//teapot = load3DModel("models/wt_teapot.assbin");
//setTransform(teapot, translate(0, -0.5, 0) * scale(0.75));
//addChild(CBNode, teapot);

//pikachuNode = load3DModel("models/Pikachu_corrected_subdivided.assbin");
//setTransform(pikachuNode, translate(0, -1, 0) * scale(0.75) * translate(0, 1, 0));
//addChild(CBNode, pikachuNode);

cameraNode = createNode();
    camera = createPerspectiveCamera("aspect": 1.0, "fovY": 0.5235987756, "radius": 0.025, 
                                     "imgDist": 1.0, "objDist": 5);
    addChild(cameraNode, camera);
setTransform(cameraNode, translate(0, 0, 5) * rotateY(-3.1415926536));

addChild(root, cameraNode);
